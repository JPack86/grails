h4. Dependency Injection Basics

A key aspect of Grails services is the ability to take advantage of the "Spring Framework's":http://www.springframework.org/ dependency injection capability. Grails supports "dependency injection by convention". In other words you can use the property name representation of the class name of a service to automatically inject them into controllers, tag libraries, and so on.

As an example given a service called @BookService@ if you place a property called @bookService@ within a controller as follows:

{code:java}
class BookController {
   def bookService
   ...
}
{code}

Then the Spring container will automatically inject an instance of that service based on its configured scope. All dependency injection is done by name, Grails does not support typed injection. You can specify the type as follows:

{code:java}
class AuthorService {
	BookService bookService
}
{code}

However, this has an adverse effect on reloading with an error thrown if the @BookService@ changes in development mode. 

h4. Dependency Injection and Services

You can inject services in other services with the same technique. Say you had an @AuthorService@ that needed to use the @BookService@, declaring the @AuthorService@ as follows would allow that:

{code:java}
class AuthorService {
	def bookService
}
{code}

h4. Dependency Injection and Domain Classes

You can even inject services into domain classes which can aid in the development of rich domain models:

{code:java}
class Book {	
	...
	def bookService
	def buyBook() {
		bookService.buyBook(this)
	}
}
{code}
