GORM supports a number of powerful ways to query from dynamic finders, to criteria to Hibernate's object oriented query language HQL.

Groovy's ability to manipulate collections via "GPath":http://groovy.codehaus.org/GPath and methods like sort, findAll and so on combined with GORM results in a powerful combination.  

However, let's start with the basics.

h4. Listing instances

If you simply need to obtain all the instances of a given class you can use the [list|domainClasses] method:

{code}
def books = Book.list()
{code}                 

The [list|domainClasses] method supports arguments to perform pagination:

{code}
def books = Book.list(offset:10, max:20)
{code}                                 

As well as sorting:

{code}
def books = Book.list(sort:"asc", order:"title")
{code}                                 
                                              
h4. Retrieval by Database  Identifier

The second basic form of retrieval is by database identifier using the [get|domainClasses] method:

{code}
def book = Book.get(23)
{code}                

You can also obtain a list of instances for a set of identifiers using [getAll|domainClasses]:

{code}
def books = Book.getAll(23, 93, 81)
{code}

