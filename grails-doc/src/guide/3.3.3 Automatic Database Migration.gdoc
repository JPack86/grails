The @dbCreate@ property of the @DataSource@ definition is important as it dictates what Grails should do at runtime with regards to automatically generating the database tables from [GORM|guide:gorm] classes. The options are:

* @create-drop@ - Drop and re-create the database when Grails is run
* @create@ - Create the database if it doesn't exist, but don't modify it if it does
* @update@ - Create the database if it doesn't exist, and modify it if it does exist

In [development|guide:envs] mode @dbCreate@ is by default set to "create-drop":

{code}
dataSource {
	dbCreate = "create-drop" // one of 'create', 'create-drop','update'
}
{code}

What this does is automatically drop and re-create the database tables on each restart of the application. Obviously this may not be what you want in production. 

{note}
Although Grails does not currently support Rails-style Migrations out of the box, there are currently two plug-ins that provide similar capabilities to Grails: The [LiquiBase|http://www.liquibase.org/manual/latest/grails.html] plug-in and the [DbMigrate|http://code.google.com/p/dbmigrate/wiki/Grails] plug-in both of which are available via the @grails list-plugins@ command
{note}



