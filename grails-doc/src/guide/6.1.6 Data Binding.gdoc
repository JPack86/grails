Data binding is the act of "binding" incoming request parameters onto the properties of an object or an entire graph of objects. Data binding should deal with all necessary type conversion since request parameters, which are typically delivered via a form submission, are always strings whilst the properties of a Groovy or Java object may well not be.

Grails uses [Spring's|http://www.springframework.org] underlying data binding capability to perform data binding. 

h4. Binding Request Data to the Model

There are two ways to bind request parameters onto the properties of a domain class. The first involves using a domain classes' implicit constructor:

{code:java}
def save = {
  def b = new Book(params)
  b.save()
}
{code}

The data binding happens within the code @new Book(params)@. By passing the [params|controllers] object to the domain class constructor Grails automatically recognizes that you are trying to bind from request parameters. So if we had an incoming request like:

{code:java}
/book/save?title=The%20Stand&author=Stephen%20King
{code}

Then the @title@ and @author@ request parameters would automatically get set on the domain class. If you need to perform data binding onto an existing instance then you can use the [properties|domainClasses] property:

{code:java}
def save = {
  def b = Book.get(params.id)
  b.properties = params
  b.save()
}
{code}

This has exactly the same effect as using the implicit constructor.

h4. Data binding and Associations

If you have a @one-to-one@ or @many-to-one@ association you can use Grails' data binding capability to update these relationships too. For example if you have an incoming request such as:

{code:java}
/book/save?author.id=20
{code}

Grails will automatically detect the @.id@ suffix on the request parameter and look-up the @Author@ instance for the given id when doing data binding such as:

{code:java}
def b = new Book(params)
{code}

h4. Data binding with Multiple domain classes

It is possible to bind data to multiple domain objects from the [params|controllers] object. 

For example so you have an incoming request to:

{code:java}
 /book/save?book.title=The%20Stand&author.name=Stephen%20King
{code}

You'll notice the difference with the above request is that each parameter has a prefix such as @author.@ or @book.@ which is used to isolate which parameters belong to which type. Grails' @params@ object is like a multi-dimensional hash and you can index into to isolate only a subset of the parameters to bind.

{code:java}
def b = new Book(params['book'])
{code}

Notice how we use the prefix before the first dot of the @book.title@ parameter to isolate only parameters below this level to bind. We could do the same with an @Author@ domain class:

{code:java}
def a = new Author(params['author'])
{code}

h4. Data binding and type conversion errors

Sometimes when performing data binding it is not possible to convert a particular String into a particular target type. What you get is a type conversion error. Grails will retain type conversion errors inside the [errors|domainClasses] property of a Grails domain class. Take this example:

{code:java}
class Book {
    ...
    URL publisherURL
}
{code}

Here we have a domain class @Book@ that uses the Java concrete type @java.net.URL@ to represent URLs. Now say we had an incoming request such as:

{code:java}
  /book/save?publisherURL=a-bad-url
{code}


In this case it is not possible to bind the string @a-bad-url@ to the @publisherURL@ property os a type mismatch error occurs. You can check for these like this:


{code:java}
def b = new Book(params)

if(b.hasErrors()) {
   println "The value ${b.errors.getFieldError('publisherURL').rejectedValue} is not a valid URL!"
}
{code}

Although we have not yet covered error codes (for more information see the section on [Validation|guide:validation]), for type conversion errors you would want a message to use for the error inside the grails-app/i18n/messages.properties file. You can use a generic error message handler such as:

{code:java}
typeMismatch.java.net.URL=The field {0} is not a valid URL
{code}

Or a more specific one:

{code:java}
typeMismatch.Book.publisherURL=The publisher URL you specified is not a valid URL
{code}

h4. Data Binding and Security concerns

When batch updating properties from request parameters you need to be careful not to allow clients to bind malicious data to domain classes that end up being persisted to the database.

This problem can be circumvented in a couple of ways, one way it to use [Command Objects|guide:commandObjects]. Another way, covered here, is to use the flexible [bindData|controllers] method.

The @bindData@ method allows the same data binding capability, but to arbitrary objects:

{code:java}
def sc = new SaveCommand()
bindData(sc, params)
{code}

However, the @bindData@ method also allows you to exclude certain parameters that you don't want updated:

{code:java}
def sc = new SaveCommand()
bindData(sc, params, ['myReadOnlyProp'])
{code}



