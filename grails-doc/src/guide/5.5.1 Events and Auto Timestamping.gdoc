GORM supports the registration of events as closures that get fired when certain events occurs such as deletes, inserts and updates. To add an event simply register the relevant closure with your domain class.
Event types

h4. The beforeInsert event

Fired before an object is saved to the db

{code:java}
class Person {
   Date dateCreated

   def beforeInsert = {
       dateCreated = new Date()
   }
}

{code}

h4. The beforeUpdate event

Fired before an existing object is updated

{code:java}
class Person {
   Date dateCreated
   Date lastUpdated

   def beforeInsert = {
       dateCreated = new Date()
   }
   def beforeUpdate = {
       lastUpdated = new Date()
   }
}
{code}

h4. The beforeDelete event

Fired before an object is deleted.

{code:java}
class Person {
   String name
   Date dateCreated
   Date lastUpdated

   def beforeDelete = {
      new ActivityTrace(eventName:"Person Deleted",data:name).save()
   }
}

{code}

h4. The onLoad event

Fired when an object is loaded from the db:

{code:java}
class Person {
   String name
   Date dateCreated
   Date lastUpdated

   def onLoad = {
      name = "I'm loaded"
   }
}
{code}

h4. Automatic timestamping

The examples above demonstrated using events to update a @lastUpdated@ and @dateCreated@ property to keep track of updates to objects. However, this is actually not necessary. By merely defining a @lastUpdated@ and @dateCreated@ property these will be automatically updated for you by GORM.

If this is not the behaviour you want you can disable this feature with:

{code:java}
class Person {
   Date dateCreated
   Date lastUpdated
   static mapping = {
      autoTimestamp false
   }
}
{code}

