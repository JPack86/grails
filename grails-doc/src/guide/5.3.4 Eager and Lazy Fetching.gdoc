Associations in GORM are by default lazy. This is best explained by example:

{code}
class Airport {
	String name
	static hasMany = [flights:Flight]
}
class Flight {
	String number
	static belongsTo = [airport:Airport]
}
{code}

Given the above domain classes and the following code:

{code}
def airport = Airport.findByName("Gatwick")
airport.flights.each {
	println it.name
}
{code}

GORM will execute a single SQL query to fetch the @Airport@ instance and then 1 extra query _for each_ iteration over the @flights@ association. In other words you get N+1 queries.

This can sometimes be optimal depending on the frequency of use of the association as you may have logic that dictates the associations is only accessed on certain occasions. 

An alternative is to use eager fetching which can specified as follows:

{code}
class Airport {
	String name
	static hasMany = [flights:Flight]
	static fetchMode = [flights:"eager"]
}
{code}

In  this case the association will be @Airport@ instance and the @flights@ association will be loaded all at once (depending on the mapping). This has the benefit of requiring fewer queries, however should be used carefully as you could load your entire database into memory with too many eager associations.

{note}
Associations can also be declared non-lazy using the [ORM DSL|guide:ormdsl]
{note}


