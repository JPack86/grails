h4. Redirects

Actions can be redirected using the [redirect|controllers] method present in all controllers:

{code}
class OverviewController {
    def login = {}

    def find = {
        if(!session.user)
           redirect(action:login)
        ...
    }
}    
{code}

Internally the [redirect|controllers] method uses the [HttpServletResonse|api:javax.servlet.http.HttpServletResponse] object's @sendRedirect@ method.

The @redirect@ method expects either:

* Another closure within the same controller class:

{code}
// Call the login action within the same class
redirect(action:login)
{code}

* The name of a controller and action:

{code}
// Also redirects to the index action in the home controller
redirect(controller:'home',action:'index')
{code}

*  A URI for a resource relative the application context path: 

{code}
// Redirect to an explicit URI
redirect(uri:"/login.html")
{code}        

* Or a full URL:

{code}
// Redirect to a URL
redirect(url:"http://grails.org")
{code}

Parameters can be optionally passed from one action to the next using the @params@ argument of the method:
      
{code}
redirect(action:myaction, params:[myparam:"myvalue"])
{code}


These parameters are made available through the [params|controllers] dynamic property that also accesses request parameters. If a parameter is specified with the same name as a request parameter the request parameter is overridden and the controller parameter used.

Since the @params@ object is also a map, you can use it to pass the current request parameters from one action to the next:

{code}
redirect(action:"next", params:params)
{code}

h4. Chaining

Actions can also be chained. Chaining allows the model to be retained from one action to the next. For example calling the @first@ action in the below action:
             
{code}
class ExampleChainController {
    def first = {
        chain(action:second,model:[one:1])
    }
    def second  = {
        chain(action:third,model:[two:2])
    }
    def third = {
         [three:3])
    }
}
{code}


Results in the model:

{code}
[one:1, two:2, three:3]
{code}      


The model can be accessed in subsequent controller actions in the chain via the @chainModel@ map. This dynamic property only exists in actions following the call to the @chain@ method:

{code}
class ChainController {

    def nextInChain = {
        def model = chainModel.myModel
        ...
    }
}
{code}


Like the @redirect@ method you can also pass parameters to the @chain@ method:
                     
{code}
chain(action:"action1", model:[one:1], params:[myparam:"param1"])
{code}


