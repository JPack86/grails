h4. Returning the Model

A model is essentially a map that the view uses when rendering. The keys within that map translate to variable names accessible by the view. There are a couple of ways to return a model, the first way is to explicitly return a map instance:

{code:java}
def show = {
 	[ book : Book.get( params.id ) ]
}
{code}

If no explicit model is returned the controller's properties will be used as the model thus allowing you to write code like this:

{code:java}
class BookController {
    List books
    List authors
    def list = {
           books = Book.list()
           authors = Author.list()
    }
}
{code}

{note}
This is possible due to the fact that controllers are prototype scoped. In other words a new controller is created for each request. Otherwise code such as the above would not be thread safe.
{note}

In the above example the @books@ and @authors@ properties will be available in the view. 

A more advanced approach is to return an instance of the Spring [ModelAndView|api:org.springframework.web.servlet.ModelAndView] class:

{code:java}
import org.springframework.web.servlet.ModelAndView

def index = {
    def favoriteBooks = ... // get some books just for the index page, perhaps your favorites

    // forward to the list view to show them
    return new ModelAndView("/book/list", [ bookList : favoriteBooks ])
}
{code}


h4. Selecting the View

In both the previous two example there was no code that specified which [view|guide:GSP] to render. So how does Grails know which view to pick? The answer lies in the conventions. For the action:

{code:java}
class BookController {
	def show = {
	 	[ book : Book.get( params.id ) ]
	}	
}
{code}

Grails will automatically look for a view at the location @grails-app/views/book/show.gsp@ (actually Grails will try to look for a JSP first, as Grails can equally be used with JSP).

If you wish to render another view, then the [render|controllers] method there to help:

{code:java}
def show = {
  	def map = [ book : Book.get( params.id ) ]
    render(view:"display", model:map)
}	
{code}

In this case Grails will attempt to render a view at the location @grails-app/views/book/display.gsp@. Notice that Grails automatically qualifies the view location with the @book@ folder of the @grails-app/views@ directory. This is convenient, but if you have some shared views you need to access instead use:

{code:java}
def show = {
  	def map = [ book : Book.get( params.id ) ]
    render(view:"/shared/display", model:map)
}	
{code}

In this case Grails will attempt to render a view at the location @grails-app/views/shared/display.gsp@.


h4. Rendering a Response

Sometimes its easier (typically with Ajax applications) to render snippets of text or code to the response directly from the controller. For this, the highly flexible @render@ method can be used:

{code:java}
render "Hello World!"
{code}


The above code writes the text "Hello World!" to the response, other examples include:

{code:java}
// write some markup
render {
   for(b in books) {
      div(id:b.id, b.title)
   }
}
// render a specific view
render(view:'show')
// render a template for each item in a collection
render(template:'book_template', collection:Book.list())
// render some text with encoding and content type
render(text:"<xml>some xml</xml>",contentType:"text/xml",encoding:"UTF-8")
{code}


