Grails has built in support for [Content negotiation|http://en.wikipedia.org/wiki/Content_negotiation] using either the HTTP @Accept@ header, an explicit format request parameter or the extension of a mapped URI. 

h4. Configuring Mime Types

Before you can start dealing with content negotiation you need to tell Grails what content types you wish to support. By default Grails comes configured with a number of different content types within @grails-app/conf/Config.groovy@ using the @grails.mime.types@ setting:

{code:java}
grails.mime.types = [ xml: ['text/xml', 'application/xml'],
                      text: 'text-plain',
                      js: 'text/javascript',
                      rss: 'application/rss+xml',
                      atom: 'application/atom+xml',
                      css: 'text/css',
                      cvs: 'text/csv',
                      all: '*/*',
                      json: 'text/json',
                      html: ['text/html','application/xhtml+xml']
                    ]
{code}

The above bit of configuration allows Grails to detect to format of a request containing either the 'text/xml' or 'application/xml' media types as simply 'xml'. You can add your own types by simply adding new entries into the map.

h4. Content Negotiation using the Accept header

Every incoming HTTP request has a special [Accept|http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html] header that defines what media types (or mime types) a client can "accept". In older browsers this is typically:

{code:java}
*/*
{code}

Which simply means anything. However, on newer browser something all together more useful is sent such as (an example of a Firefox @Accept@ header):

{code:java}
text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
{code}

Grails parses this incoming format and adds a [format|request] property to the @request@ object that outlines the preferred request format. For the above example the following assertion would pass:

{code:java}
assert 'html' == request.format
{code}

Why? The @text/html@ media type has the highest "quality" rating of 0.9, therefore is the highest priority. If you have an older browser as mentioned previously the result is slightly different:

{code:java}
assert 'all' == request.format
{code}

In this case 'all' possible formats are accepted by the client. To deal with different kinds of requests from [Controllers|guide:controllers] you can use the [withFormat|controllers] method that acts as kind of a switch statement:

{code:java}
import grails.converters.*

class BookController {
	def books
	def list = {
		this.books = Book.list()
		withFormat {
			html bookList:books
			js { render "alert('hello')" } 
			xml { render books as XML }
		}
	}
}
{code}

What happens here is that if the preferred format is @html@ then Grails will execute the @html()@ call only. What this is does is make Grails look for a view called either @grails-app/views/books/list.html.gsp@ or @grails-app/views/books/list.gsp@. If the format is @xml@ then the closure will be invoked and an XML response rendered.

If the accept header is 'all' such as in an older browser then the format to select is based on the order of the calls within the @withFormat@ method. In the previous example the @html@ method will be invoked first in this case.

{note}
When using [withFormat|controllers] make sure it is the last call in your controller action as the return value of the @withFormat@ method is used by the action to dictate what happens next.
{note}

h4. Content Negotiation with the format Request Parameter

If fiddling with request headers if not your favorite activity you can override the format used by specifying a @format@ request parameter:

{code:java}
/book/list?format=xml
{code}

You can also define this parameter in the [URL Mappings|guide:mappings] definition:

{code:java}
"/book/list"(controller:"book", action:"list") {
	format = "xml"
}
{code}

h4. Content Negotiation with URI Extensions

Grails also supports content negotiation via URI extensions. For example given the following URI:

{code:java}
/book/list.xml
{code}

Grails will shave off the extension and map it to @/book/list@ instead whilst simultaneously setting the content format to @xml@ based on this extension. For this to work you must have the @grails.mime.file.extensions@ setting in @grails-app/conf/Config.groovy@ set to @true@:

{code:java}
grails.mime.file.extensions = true
{code}