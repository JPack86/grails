Like "Java Server Pages":http://java.sun.com/products/jsp/ (JSP), GSP supports the concept of custom tag libraries. Unlike JSP, Grails tag library mechanism is simply, elegant and completely reload-able at runtime.

Quite simply, to create a tag library create a Groovy class that ends with the convention @TagLib@ and place it within the @grails-app/taglib@ directory:

{code:java}
class SimpleTagLib {
	
}
{code}

Now to create a tag simply create property that is assigned a block of code that takes two arguments: The tag attributes and the body content:

{code:java}
class SimpleTagLib {
	def simple = { attrs, body ->
		
    }
}
{code}

The @attrs@ argument is a simple map of the attributes of the tag, whilst the @body@ argument is another invokable block of code that returns the body content:

{code:java}
class SimpleTagLib {
	def emoticon = { attrs, body ->
	   out << body() << attrs.happy == 'true' ? " :-)" : " :-("	
    }
}
{code}

As demonstrated above there is an implicit @out@ variable that refers to the output @Writer@ which you can use to append content to the response. Then you can simply reference the tag inside your GSP, no imports necessary:

{code:xml}
<g:emoticon happy="true">Hi John</g:emoticon>
{code}

Within the scope of a tag library there are a number of pre-defined variables including:

* @actionName@ - The currently executing action name
* @controllerName@ - The currently executing controller name
* @flash@ - The [flash|controllers] object
* @grailsApplication@ - The [GrailsApplication|api:org.codehaus.groovy.grails.commons.GrailsApplication] instance
* @out@ - The response writer for writing to the output stream
* @pageScope@ - A reference to the page scope object used for GSP rendering (i.e. the binding)
* @params@ - The [params|controllers] object for retrieving request parameters
* @pluginContextPath@ - The context path to the plugin that contains the tag library
* @request@ - The [HttpServletRequest|api:javax.servlet.http.HttpServletRequest] instance
* @response@ - The [HttpServletResponse|api:javax.servlet.http.HttpServletResponse] instance
* @servletContext@ - The [javax.servlet.ServletContext|api:javax.servlet.ServletContext] instance
* @session@ - The [HttpSession|api:javax.servlet.http.HttpSession] instance
