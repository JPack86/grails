It is critical that you understand how cascading updates and deletes work when using GORM. The key part to remember is the @belongsTo@ setting which controls which class "owns" a relationship.

Whether it is a one-to-one, one-to-many or many-to-many if you define @belongsTo@ updates and deletes will cascade from the owning class to its possessions (the other side of the relationship).

If you _do not_ define @belongsTo@ than no cascades will happen and you will have to manually save each object.

Here is an example:

{code}
class Airport {
	String name
	static hasMany = [flights:Flight]
}
class Flight {
	String number
	static belongsTo = [airport:Airport]
}
{code}

If I now create an @Airport@ and add some @Flight@s to it I can save the @Airport@ and have the updates cascaded down to each flight, hence saving the whole object graph:

{code}
new Airport(name:"Gatwick")
	 .addToFlights(new Flight(number:"BA3430"))
	 .addToFlights(new Flight(number:"EZ0938"))
	 .save()
{code}

Conversely if I later delete the @Airport@ all @Flight@s associated with it will also be deleted:

{code}
def airport = Airport.findByName("Gatwick")
airport.delete()
{code}

However, if I were to remove @belongsTo@ then the above cascading deletion code *would not work*. To understand this better take a look at the summaries below that describe the default behaviour of GORM with regards to specific associations. 

h5. Bidirectional one-to-many with belongsTo

{code}
class A { static hasMany = [bees:B] }
class B { static belongsTo = [a:A] }
{code}

In the case of a bidirectional one-to-many where the many side defines a @belongsTo@ then the cascade strategy is set to "ALL" for the one side and "NONE" for the many side.

h5. Unidirectional one-to-many

{code}
class A { static hasMany = [bees:B] }
class B {  }
{code}

In the case of a unidirectional one-to-many where the many side defines no belongsTo then the cascade strategy is set to "SAVE-UPDATE".

h5. Bidirectional one-to-many no belongsTo

{code}
class A { static hasMany = [bees:B] }
class B { A a }
{code}

In the case of a bidirectional one-to-many where the many side does not define a @belongsTo@ then the cascade strategy is set to "SAVE-UPDATE" for the one side and "NONE" for the many side.

h5. Unidirectional One-to-one with belongsTo

{code}
class A {  }
class B { static belongsTo = [a:A] }
{code}

In the case of a unidirectional one-to-one association that defines a @belongsTo@ then the cascade strategy is set to "ALL" for the owning side of the relationship (A->B) and "NONE" from the side that defines the @belongsTo@ (B->A)

Note that if you need further control over cascading behaviour, you can use the [ORM DSL|guide:ormdsl].