As as mentioned previously, a plugin is merely a regular Grails application with a contained plug-in descriptors. However when installed, the structure of a plugin differs slightly. For example, take a look at this plugin directory structure:

{code:java}
+ grails-app
     + controllers
     + domain
     + taglib
     etc.
 + lib
 + src
     + java
     + groovy
 + web-app
     + js
     + css{code}

Essentially when a plugin is installed into a project, the contents of the @grails-app@ directory will go into a directory such as @plugins/example-1.0/grails-app@. They *will not* be copied into the main source tree. A plugin never interferes with a project's primary source tree.

However, static resources such as those inside the @web-app@ directory will be copied into the project's web-app directory under a special @plugins@ directory. For example @web-app/plugins/example-1.0/js@. 

It is therefore the responsibility of the plugin to make sure that it references static resources from the correct place. For example if you were referencing a JavaScript source from a GSP you could use:

{code:xml}
<g:resource dir="/plugins/example/js" file="mycode.js" />{code}

However this may cause a problem during development as the relative link when installed differs from when you're running the plugin standalone. 

To make this easier there is a special @pluginContextPath@ variable available that changes whether you're executing the plugin standalone or whether you've installed it into an application:

{code:xml}
<g:resource dir="${pluginContextPath}/js" file="mycode.js" />
{code}

At runtime the @pluginContextPath@ will either evaluate to an empty string or @/plugins/example@ depending on whether the plugin is running standalone or has been installed in an application

Java & Groovy code that the plugin provides within the lib and @src/java@ and @src/groovy@ directories will be compiled into the main project's @web-app/WEB-INF/classes@ directory so that they are made available at runtime.
