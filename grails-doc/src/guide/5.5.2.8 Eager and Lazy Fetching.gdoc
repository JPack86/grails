h5. Lazy Collections

As discussed in the section on [Eager and Lazy fetching|guide:fetching], by default GORM collections use lazy fetching and is is configurable through the @fetchMode@ setting. However, if you prefer to group all your mappings together inside the @mappings@ block you can also use the ORM DSL to configure fetching:

{code:java}
class Person {
  String firstName
  static hasMany = [addresses:Address]
  static mapping = {
      addresses lazy:false
  }
}
class Address {
  String street
  String postCode
}
{code}

h4. Lazy Single-Ended Associations

In GORM, one-to-one and many-to-one associations are by default non-lazy. This can be problematic in cases when you are loading many entities which have an association to another entity as a new SELECT statement is executed for each loaded entity. You can make one-to-one and many-to-one associations lazy using the same technique as for lazy collections:

{code:java}
class Person {
	String firstName
	static belongsTo = [address:Address]
	static mapping = {
		address lazy:true // lazily fetch the address
	}
}
class Address {
	String street
	String postCode
}
{code}

Here we set the @address@ property of the @Person@ class to be lazily loaded.

