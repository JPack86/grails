Another important thing to note about errors in Grails is that the messages that the errors display are not hard coded anywhere. The [FieldError|api:org.springframework.validation.FieldError] class in Spring essentially resolves messages from message bundles using Grails' [i18n|guide:i18n] support.

h4. Constraints and Message Codes

The codes themselves are dictated by a convention. For example consider the constraints we looked at earlier:

{code:java}
class User {
    ...

    static constraints = {
        login(size:5..15, blank:false, unique:true)
        password(size:5..15, blank:false)
        email(email:true, blank:false)
        age(min:18, nullable:false)
    }
}
{code}

If the @blank@ constraint was violated Grails will, by convention, look for a message code in the form:

{code:java}
[Class Name].[Property Name].[Constraint Code]
{code}

In the case of the @blank@ constraint this would be @user.login.blank@ so you would need a message such as the following in your @grails-app/i18n/messages.properties@ file:

{code:java}
user.login.blank=Your login name must be specified!
{code}

For a reference on what codes are for which constraints refer to the reference guide for each constraint.

h4. Displaying Messages

The [renderErrors|tags] tag will automatically deal with looking up messages for you using the [message|tags] tag. However, if you need more control of rendering you will need to do this yourself:

{code:xml}
<g:hasErrors bean="${user}">
  <ul>
   <g:eachError var="err" bean="${user}">
       <li><g:message error="${err}" /></li> 
   </g:eachError>
  </ul>
</g:hasErrors>
{code}

In this example within the body of the [eachError|tags] tag we use the [message|tags] tag in combination with its @error@ argument to read the message for the given error.

