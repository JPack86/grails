In the section on [start and end states|guide:6.5.1 Start and End States], the start state in the first example triggered a transition to the @enterPersonalDetails@ state. This state renders a view and waits for the user to enter the required information:

{code:java}
enterPersonalDetails {
   on("submit").to "enterShipping"
   on("return").to "showCart"
}
{code}

The view contains a form with two submit buttons that either trigger the submit event or the return event:

{code:xml}
<g:form action="shoppingCart">
    <!-- Other fields -->
    <g:submitButton name="submit" value="Continue"></g:submitButton>
    <g:submitButton name="return" value="Back"></g:submitButton>
</g:form>
{code}

However, what about the capturing the information submitted by the form? To to capture the form info we can use a flow transition action:

{code:java}
enterPersonalDetails {
   on("submit") {
         flow.person = new Person(params)
         !flow.person.validate() ? error() : success()
   }.to "enterShipping"
   on("return").to "showCart"
}
{code}

Notice how we perform data binding from request parameters and place the @Person@ instance within @flow@ scope. Also interesting is that we perform [validation|guide:validation] and invoke the @error()@ method if validation fails. This signals to the flow that the transition should halt and return to the @enterPersonalDetails@ view so valid entries can be entered by the user, otherwise the transition should continue and go to the @enterShipping@ state.