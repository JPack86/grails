Grails' URL mappings mechanism also supports wildcard mappings. For example consider the following mapping:

{code:java}
static mappings = {
	"/images/*.jpg"(controllers:"image")
}
{code}

This mapping will match all paths to images such as @/image/logo.jpg@. Of course you can achieve the same effect with a variable:

{code:java}
static mappings = {
	"/images/$name.jpg"(controllers:"image")
}
{code}

However, you can also use double wildcards to match more than one level below:

{code:java}
static mappings = {
	"/images/**.jpg"(controllers:"image")
}
{code}

In this cases the mapping will match @/image/logo.jpg@ as well as @/image/other/logo.jpg@. Even better you can use a double wildcard variable:

{code:java}
static mappings = {
	// will match /image/logo.jpg and /image/other/logo.jpg 
	"/images/$name**.jpg"(controllers:"image")
}
{code}

In this case it will store the path matched by the wildcard inside a @name@ parameter obtainable from the [params|controllers] object:

{code:java}
def name = params.name
println name // prints "logo.jpg" or "other/logo.jpg"
{code}




