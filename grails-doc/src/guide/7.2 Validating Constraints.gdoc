h4. Validation Basics

To validate a domain class you can call the [validate|domainClasses] method on any instance:

{code:java}
def user =  new User(params)

if(user.validate()) {
    // do something with user
}
else {
    user.errors.allErrors.each {
        println it
    }
}
{code}

The @errors@ property on domain classes is an instance of the Spring [Errors|api:org.springframework.validation.Errors] interface. The @Errors@ interface provides methods to navigate the validation errors and also retrieve the original values.

h4. Validation Phases

Within Grails there are essentially 2 phases of validation, the first phase is [data binding|guide:dataBinding] which occurs when you bind request parameters onto an instance such as:

{code:java}
def user = new User(params)
{code}

At this point you may already have errors in the @errors@ property due to type conversion (such as converting Strings to Dates). You can check these and obtain the original input value using the @Errors@ API:

{code:java}
if(user.hasErrors()) {
	if(user.hasFieldError("login")) {
		println user.getFieldError("login").rejectedValue
	}
}
{code}

The second phase of validation happens when you call [validate|domainClasses] or [save|domainClasses]. This is when Grails will validate the bound values againts the [constraints|domainClasses] you defined. For example, by default the persistent [save|domainClasses] method calls @validate@ before executing hence allowing you to write code like:

{code:java}
if(user.save()) {
    return user
}
else {
    user.errors.allErrors.each {
        println it
    }
}
{code}

