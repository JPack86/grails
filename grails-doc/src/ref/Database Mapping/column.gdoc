h1. column

h2. Purpose

Customizes a column definition 

h2. Examples

{code:java}
	static mapping = {
		currency column: "currency", sqlType: "char", length: 3		
	}
{code}

h2. Description

Usage: @property_name(map)@

Arguments:

* @column@ - The name of the column as a String 
* @sqlType@ (optional) - The underlying SQL type
* @enumType@ (optional) - The enum type in for type-safe Enum properties. Either @ordinal@ or @string@.
* @index@ (optional) - The index name
* @unique@ (optional) - Whether it is unique or not
* @length@ (optional) - The length of the column
* @precision@ (optional) - The precision of the column
* @scale@ (optional) - The scale of the column


By default GORM uses the property name and type to automatically work out a how to map a particular domain property onto the database. For example a String property is typically mapped onto a varchar(255) column. You can customize these using a method that matches the property name and passing the necessary column configuration arguments:

{code:java}
	static mapping = {
		currency column: "currency", sqlType: "char", length: 3		
	}
{code}

If you are using a Hibernate [type|databaseMapping] that requires multiple column definitions you can use the @column@ method to define each column:

{code:java}
static mapping =  {
     amount type: MonetaryUserType, {
         column name: "value"
         column name: "currency", sqlType: "char", length: 3
     }
}
{code}