h1. run-app

h2. Purpose

Runs Grails using the installed container on port @8080@

h2. Examples

{code:java}
grails run-app
grails run-app -https // with HTTPS
grails test run-app
grails -Dserver.port=8090 -Denable.jndi=true -Ddisable.auto.recompile=true run-app
{code}

h2. Description

Usage: 
{code:java}
grails [env]* run-app
{code}

Arguments:

* @https@ - Start an HTTPS server (on port 8443 by default) alongside the main server. Just to be clear, the application will be accessible via HTTPS _and_ HTTP.

Supported system properties:

* @disable.auto.recompile@ - Disables auto-recompilation of Java sources, which can be processor intensive (defaults to false)
* @recompile.frequency@ - Specifies how frequently (in seconds) Grails checks for changes to Java and Groovy sources in your project (defaults to 3).
* @grails.server.port.http@/@server.port@ - Specifies the HTTP port to run the server on (defaults to 8080)
* @grails.server.port.https@ - Specifies the HTTPS port to run the server on (defaults to 8443)
* @grails.server.host@/@server.host@ - Specifies the host name to run the server on (defaults to localhost)


Fired Events:

* @StatusFinal@ - When the container has been started
* @StatusUpdate@ - When the container is reloading

This command will start Grails up in an embedded servlet container that can serve HTTP requests. The default container used is "Tomcat":http://tomcat.apache.org. However, alternative containers are supported via the plugin system. For example to run Grails with Jetty run the following two commands:

{code}
grails uninstall-plugin tomcat
grails install-plugin jetty
{code}

This target is not intended for deployment as the container in development mode is configured to auto-reload changes at runtime which has an overhead attached to it and will not scale well.

