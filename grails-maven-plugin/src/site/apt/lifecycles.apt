~~
~~  Copyright 2007 the original author or authors.
~~  
~~  Licensed under the Apache License, Version 2.0 (the "License");
~~  you may not use this file except in compliance with the License.
~~  You may obtain a copy of the License at
~~  
~~  http://www.apache.org/licenses/LICENSE-2.0
~~  
~~  Unless required by applicable law or agreed to in writing, software
~~  distributed under the License is distributed on an "AS IS" BASIS,
~~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~  See the License for the specific language governing permissions and
~~  limitations under the License. 
~~

    ------
    Maven Lifecycles for a Grails application
    ------
    Arnaud HERITIER
    ------
    August 19, 2007


Lifecycles

  The grails plugin redefine the default and the clean lifecycles. 
  Those lifecycles are activated in the pom with the usage of the plugin with its extensions 
  
+-------+
  <build>
    <plugins>
      <plugin>
        <groupId>com.octo.mtg</groupId>
        <artifactId>grails-maven-plugin</artifactId>
        <extensions>true</extensions>
      </plugin>
    </plugins>
  </build>
+-------+ 
 
  and a packaging set to "grails-app"

+-------+
  <packaging>grails-app</packaging>
+-------+ 

* Default Lifecycle

*--------------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------+
 <<Phase>>           | <<Mojo>>                                                                                 | <<Description>>
*--------------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------+
 validate            | {{{./validate-mojo.html}com.octo.mtg:grails-maven-plugin:validate}}                      | Check that the Grails application.properties and the pom.xml in maven use the same application name and version 
*--------------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------+
 generate-sources    | {{{./config-directories-mojo.html}com.octo.mtg:grails-maven-plugin:config-directories}}  | Set sources/tests directories to be compatible with the directories layout used by grails
*--------------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------+
 process-resources * | {{{./copy-dependencies-mojo.html}com.octo.mtg:grails-maven-plugin:copy-dependencies}}    | Copy the POM dependencies in the lib directory of the grails project
*--------------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------+
 test                | {{{./test-app-mojo.html}com.octo.mtg:grails-maven-plugin:maven-test-app}}                | Call the grails:test-app command to run unit and integration tests
*--------------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------+
 package             | {{{./maven-war-mojo.html}com.octo.mtg:grails-maven-plugin:maven-war}}                    | Call the grails:war command and put the result in the standard location for maven   
*--------------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------+
 integration-test    | {{{./run-webtest-mojo.html}com.octo.mtg:grails-maven-plugin:maven-run-webtest}}          | Call the grails:run-webtest command to run Cannoo web tests (if grails.webtest.enable = true).
*--------------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------+
 install             | org.apache.maven.plugins:maven-install-plugin:install                                    | Install the WAR in the local repository
*--------------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------+
 deploy              | org.apache.maven.plugins:maven-deploy-plugin:deploy                                      | Deploy the WAR in the remote repository
*--------------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------+
Default Lifecycle phases

  ( * ) The validate phase requires to call the process-resources phase of a forked lifecycle called grailsCopyDependencies. In this phase the copy-dependencies mojo of the plugin org.apache.maven.plugins:maven-dependency-plugin is called to copy in the lib directory all projects dependencies of type jar which have not a provided scope or system.

* Clean Lifecycle

*--------+---------------------------------------------------------------------+-------------------------------+
<<Phase>>| <<Mojo>>                                                            | <<Description>>
*--------+---------------------------------------------------------------------+-------------------------------+
 clean * | {{{./clean-mojo.html}com.octo.mtg:grails-maven-plugin:maven-clean}} | Call the grails clean command and the default clean command of maven
*--------+---------------------------------------------------------------------+-------------------------------+
Clean Lifecycle phases

  ( * ) The clean phase requires to call the clean phase of a forked lifecycle called grailsClean. In this phase the clean mojo of the plugin org.apache.maven.plugins:maven-clean-plugin is called to remove jars from the lib directory.